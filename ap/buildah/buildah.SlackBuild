#!/bin/sh
# Set initial variables:
CWD=$(pwd)

APP=buildah
VERSION=$(ls $APP-*.tar.?z* | sed -e 's/\.tar\..z.*//' | rev | cut -d- -f1 | rev)
MARCH=${MARCH:-native}
ARCH=${ARCH:-x86_64}
BUILD=${BUILD:-1}
TAG=${TAG:-micu}
TMP=${TMP:-/tmp}
OUTDIR=${OUTDIR:-$TMP}

# Go version (empty for current)
GOVER=${GOVER:-1.18.6}
# The domain part of the go package name, usually the hosting platform
DOMAIN=github.com
# The name of the organization/owner of the package
ORG=containers
# The name of the repository
REPONAME=$APP

LIBSUFFIX=""

if [ "$MARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "$MARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$MARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
elif [ "$MARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$MARCH" = "nocona" ]; then
  SLKCFLAGS="-O2 -march=nocona -mtune=generic -mmmx -msse -msse2 -msse3"
elif [ "$MARCH" = "core2" ]; then
  SLKCFLAGS="-O2 -march=core2 -mtune=core2 -mmmx -msse -msse2 -msse3"
elif [ "$MARCH" = "atom" -o "$MARCH" = "bonnell" ]; then
  SLKCFLAGS="-O2 -march=bonnell -mmmx -msse -msse2 -msse3 -mssse3 -mcx16 -msahf -mmovbe -mfxsr --param l1-cache-size=24 --param l1-cache-line-size=64 --param l2-cache-size=512 -mtune=bonnell"
elif [ "$MARCH" = "sandybridge" ]; then
  SLKCFLAGS="-O2 -march=sandybridge"
elif [ "$MARCH" = "pentium3" ]; then
  SLKCFLAGS="-O2 -march=pentium3 -mmmx -msse"
elif [ "$MARCH" = "pentium2" ]; then
  SLKCFLAGS="-O2 -march=pentium2 -mmmx"
elif [ "$MARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
else
  SLKCFLAGS="-O2 -march=$MARCH"
fi

if [ "$ARCH" = "x86_64" ]; then
  LIBSUFFIX=${LIBSUFFIX:-64}
  SLKCFLAGS="$SLKCFLAGS -fPIC -m64"
fi

PKG=$TMP/package-$APP
rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP || exit 1
rm -rf $APP-$VERSION
mkdir -p $APP-$VERSION/src/$DOMAIN/$ORG
cd $APP-$VERSION/src/$DOMAIN/$ORG || exit 1
tar xvf $CWD/$APP-$VERSION.tar.?z* || exit 1
mv $APP-$VERSION $REPONAME
cd $REPONAME || exit 1
chown -R root:root .
find . -perm 444 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 666 -exec chmod 644 {} \;

# Check if we have recent go build, like the one from alien repo:
if [ ! -z "$GOROOT" ] ; then
  if [ -x "$GOROOT/bin/go" ] ; then
    if ! echo $PATH | grep -q $GOROOT/bin ; then
      export PATH=$GOROOT/bin:$PATH
    fi
  else
    export GOROOT=""
  fi
fi

# We do not have a working go in the system:
if [ -z "$GOROOT" ] ; then
  # Fresh build usually requires very recent 'go' version, newer than
  # system (gcc)go. So let's be brave, invest some time and build
  # a dedicated environment (or use the one already built there):
  GODEVDIR=${GODEVDIR:-$TMP/go-devel}
  if [ ! -x $GODEVDIR/go/bin/go ]; then
    echo "Development go not found at $GODEVDIR, building it."
    mkdir -p $GODEVDIR
    cd $GODEVDIR || exit 1
    git clone https://go.googlesource.com/go || exit 1
    export GOPATH=$GODEVDIR/go
    cd $GOPATH
    [ -z "$GOVER" ] || git checkout go$GOVER || exit 1
    cd src || exit 1
    ./all.bash || exit 1
    cd $TMP/$APP-$VERSION/src/$DOMAIN/$ORG/$REPONAME || exit 1
  else
    echo "Development go found at $GODEVDIR, using it."
  fi
  export GOROOT=$GODEVDIR/go
  export PATH=$GOROOT/bin:$PATH
fi

# Point go to the location of the source tree
export GOPATH="$TMP/$APP-$VERSION"
export CGO_CFLAGS="$SLKCFLAGS"
export CGO_CXXFLAGS="$SLKCFLAGS"

make all PREFIX="/usr" MANDIR="/usr/man" || exit 1
make install install.completions DESTDIR="$PKG" PREFIX="/usr" MANDIR="/usr/man" || exit 1

# Change runtime:
mkdir -p $PKG/etc/profile.d
cat > $PKG/etc/profile.d/buildah.sh.new << EOF
#!/bin/sh
BUILDAH_RUNTIME=/usr/bin/crun
export BUILDAH_RUNTIME
EOF
cat > $PKG/etc/profile.d/buildah.csh.new << EOF
#!/bin/csh
setenv BUILDAH_RUNTIME /usr/bin/crun
EOF
chmod 755 $PKG/etc/profile.d/buildah.*sh.new

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBSUFFIX}/*.la

chown -R root:bin $PKG/usr/bin $PKG/usr/sbin

( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | grep ELF | cut -f 1 -d : | xargs strip -g 2> /dev/null
)

# Compress and if needed symlink the man pages:
if [ -d $PKG/usr/info ]; then
  rm -f $PKG/usr/info/dir
  gzip -9 $PKG/usr/info/*
fi
if [ -d $PKG/usr/man ]; then
  ( cd $PKG/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

mkdir -p $PKG/usr/doc/$APP-$VERSION
cp -a LICENSE MAINTAINERS OWNERS changelog.txt *.md \
  $PKG/usr/doc/$APP-$VERSION

mkdir -p $PKG/install
[ -f $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -f $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Allow to run as non-root until now:
if [ $(id -u) -ne 0 ]; then
  echo "*** Running as non-root, skipping makepkg."
  echo "*** Package contents is in $PKG directory."
  exit 0
fi

cd $PKG
makepkg -l y -c n $OUTDIR/$APP-$VERSION-$ARCH-${BUILD}${TAG}.txz

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP/$APP-$VERSION
  rm -rf $PKG
  [ -z "$GODEVDIR" ] || rm -rf $GODEVDIR
fi

